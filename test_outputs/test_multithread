$ test_multithread
Testing multithreading:
Thread 1 should execute once and get destroyed
Thread 2 should be scheduled twice before getting destroyed
Thread 8 should be scheduled eight times before yielding at the end
[*] ultcreate(tid: 1, ra: 0x0000000000000000, sp: 0x0000000000002010)
[*] ultcreate(tid: 2, ra: 0x0000000000000000, sp: 0x0000000000003010)
[*] ultcreate(tid: 3, ra: 0x0000000000000000, sp: 0x0000000000004010)
[*] ultcreate(tid: 4, ra: 0x0000000000000000, sp: 0x0000000000005010)
[*] ultcreate(tid: 5, ra: 0x0000000000000000, sp: 0x0000000000006010)
[*] ultcreate(tid: 6, ra: 0x0000000000000000, sp: 0x0000000000007010)
[*] ultcreate(tid: 7, ra: 0x0000000000000000, sp: 0x0000000000008010)
[*] ultcreate(tid: 8, ra: 0x0000000000000000, sp: 0x0000000000009010)
[*] ultschedule (next tid: 1)
[.] entered the thread function (tid = 1)
[*] ultdestroy(tid: 1)
[*] ultschedule (next tid: 2)
[.] entered the thread function (tid = 2)
[*] ultyield(tid: 2)
[*] ultschedule (next tid: 3)
[.] entered the thread function (tid = 3)
[*] ultyield(tid: 3)
[*] ultschedule (next tid: 4)
[.] entered the thread function (tid = 4)
[*] ultyield(tid: 4)
[*] ultschedule (next tid: 5)
[.] entered the thread function (tid = 5)
[*] ultyield(tid: 5)
[*] ultschedule (next tid: 6)
[.] entered the thread function (tid = 6)
[*] ultyield(tid: 6)
[*] ultschedule (next tid: 7)
[.] entered the thread function (tid = 7)
[*] ultyield(tid: 7)
[*] ultschedule (next tid: 8)
[.] entered the thread function (tid = 8)
[*] ultyield(tid: 8)
[*] ultschedule (next tid: 2)
[.] entered the thread function (tid = 2)
[*] ultdestroy(tid: 2)
[*] ultschedule (next tid: 3)
[.] entered the thread function (tid = 3)
[*] ultyield(tid: 3)
[*] ultschedule (next tid: 4)
[.] entered the thread function (tid = 4)
[*] ultyield(tid: 4)
[*] ultschedule (next tid: 5)
[.] entered the thread function (tid = 5)
[*] ultyield(tid: 5)
[*] ultschedule (next tid: 6)
[.] entered the thread function (tid = 6)
[*] ultyield(tid: 6)
[*] ultschedule (next tid: 7)
[.] entered the thread function (tid = 7)
[*] ultyield(tid: 7)
[*] ultschedule (next tid: 8)
[.] entered the thread function (tid = 8)
[*] ultyield(tid: 8)
[*] ultschedule (next tid: 3)
[.] entered the thread function (tid = 3)
[*] ultdestroy(tid: 3)
[*] ultschedule (next tid: 4)
[.] entered the thread function (tid = 4)
[*] ultyield(tid: 4)
[*] ultschedule (next tid: 5)
[.] entered the thread function (tid = 5)
[*] ultyield(tid: 5)
[*] ultschedule (next tid: 6)
[.] entered the thread function (tid = 6)
[*] ultyield(tid: 6)
[*] ultschedule (next tid: 7)
[.] entered the thread function (tid = 7)
[*] ultyield(tid: 7)
[*] ultschedule (next tid: 8)
[.] entered the thread function (tid = 8)
[*] ultyield(tid: 8)
[*] ultschedule (next tid: 4)
[.] entered the thread function (tid = 4)
[*] ultdestroy(tid: 4)
[*] ultschedule (next tid: 5)
[.] entered the thread function (tid = 5)
[*] ultyield(tid: 5)
[*] ultschedule (next tid: 6)
[.] entered the thread function (tid = 6)
[*] ultyield(tid: 6)
[*] ultschedule (next tid: 7)
[.] entered the thread function (tid = 7)
[*] ultyield(tid: 7)
[*] ultschedule (next tid: 8)
[.] entered the thread function (tid = 8)
[*] ultyield(tid: 8)
[*] ultschedule (next tid: 5)
[.] entered the thread function (tid = 5)
[*] ultdestroy(tid: 5)
[*] ultschedule (next tid: 6)
[.] entered the thread function (tid = 6)
[*] ultyield(tid: 6)
[*] ultschedule (next tid: 7)
[.] entered the thread function (tid = 7)
[*] ultyield(tid: 7)
[*] ultschedule (next tid: 8)
[.] entered the thread function (tid = 8)
[*] ultyield(tid: 8)
[*] ultschedule (next tid: 6)
[.] entered the thread function (tid = 6)
[*] ultdestroy(tid: 6)
[*] ultschedule (next tid: 7)
[.] entered the thread function (tid = 7)
[*] ultyield(tid: 7)
[*] ultschedule (next tid: 8)
[.] entered the thread function (tid = 8)
[*] ultyield(tid: 8)
[*] ultschedule (next tid: 7)
[.] entered the thread function (tid = 7)
[*] ultdestroy(tid: 7)
[*] ultschedule (next tid: 8)
[.] entered the thread function (tid = 8)
[*] ultyield(tid: 8)
No thread to schedule. Exiting...
[*] User-Level Round-Robin Multithreading Test Complete.